diff --git a/README.md b/README.md
index f2bf1d8..ec3f57f 100644
--- a/README.md
+++ b/README.md
@@ -1,23 +1,25 @@
 # nomnom
-nomnom is an option parser for node and CommonJS. It noms your args and gives them back to you in a hash.
+nomnom is an option parser for node. It noms your args and gives them back to you in a hash.
 
 ```javascript
 var options = require("nomnom")
     .opts({
         debug : {
             abbr: 'd',
+            flag: true,
             help: 'Print debugging info'
         },
+        config: {
+            abbr: 'c',
+            default: 'config.json',
+            help: 'JSON file with tests to run'
+        },
         version: {
+            flag: true,
             help: 'print version and exit',
             callback: function() {
                 return "version 1.2.4";
             }
-        },
-        config: {
-            abbr: 'c',
-            default: 'config.json',
-            help: 'JSON file with tests to run'
         }
     })
     .parseArgs();
@@ -67,13 +69,12 @@ parser.command('browser')
 
 parser.command('sanity')
     .opts({
-        filename: {
-            position: 1,
-            help: 'test file to run'
+        outfile: {
+            abbr: 'o',
+            help: 'file to write results'
         },
         config: {
             abbr: 'c',
-            metavar: 'FILE',
             default: 'config.json',
             help: 'json file with tests to run'
         }
@@ -125,8 +126,8 @@ var options = require("nomnom")
 # Options hash
 The options hash that is passed to `nomnom.opts()` is a hash keyed on option name. Each option specification can have the following fields:
 
-#### abbr, full, and metavar
-`abbr` is the single character string to match to this option, `full` is the full-length string (defaults to the name of the option). `metavar` is used in the usage printout and specifies that the option expects a value, `expectsValue` can also be set to `true` for this purpose (default is `false`).
+#### abbr and full
+`abbr` is the single character string to match to this option, `full` is the full-length string (defaults to the name of the option).
 
 This option matches `-d` and `--debug` on the command line:
 
@@ -142,23 +143,28 @@ This option matches `-n 3`, `--num-lines 12` on the command line:
 numLines: {
    abbr: 'n',
    full: 'num-lines',
-   expectsValue: true
 }
 ```
 
-as does:
+#### flag
+
+If this is set to true, the option acts as a flag and doesn't swallow the next value on the command line. Default is `false`, so normally if you had a command line `--config test.js`, `config` would get a value of `test.js` in the options hash. Whereas if you specify:
 
 ```javascript
-numLines: {
-   abbr: 'n',
-   full: 'num-lines',
-   metavar: "NUM"
+config: {
+   flag: true
 }
 ```
 
+with a command line of `--config test.js`, `config` would get a value of `true` in the options hash, and `test.js` would be a free positional arg.
+
+#### metavar
+
+`metavar` is used in the usage printout e.g. `"PATH"` in `"-f PATH, --file PATH"`.
+
 #### string
 
-A shorthand for `abbr`, `full`, and `metavar`. For example, to attach an options to `-c` and `--config` and require an argument use a `string: "-c FILE, --config=FILE"`
+A shorthand for `abbr`, `full`, and `metavar`. For example, to attach an option to `-c` and `--config` use a `string: "-c FILE, --config=FILE"`
 
 #### help
 
@@ -175,7 +181,6 @@ A callback that will be executed as soon as the option is encountered. If the ca
 ```javascript
 
 count: {
-    expectsValue: true,
     callback: function(count) {
         if(count != parseInt(count))
             return "count must be an integer";
@@ -185,7 +190,7 @@ count: {
 
 #### position
 
-The position of the option if it's a positional argument. If the option should be matched to the first positional arg use position `0`
+The position of the option if it's a positional argument. If the option should be matched to the first positional arg use position `0`, etc.
 
 #### list
 
diff --git a/nomnom.js b/nomnom.js
index 6913d71..0cdbfd7 100644
--- a/nomnom.js
+++ b/nomnom.js
@@ -120,7 +120,8 @@ function ArgParser() {
   
     parseArgs : function(argv, parserOpts) {
       var printHelp = true;
-      if(argv && (!argv.length || typeof argv[0] != "string")) {
+      if(!Array.isArray(argv) || (argv.length
+           && typeof argv[0] != "string")) {
         // using old API
         parserOpts = parserOpts || {};
         parser.specs = argv;
@@ -159,7 +160,7 @@ function ArgParser() {
           // command specified e.g. 'git add -p'
           var command = parser.commands[commandName];
           if(!command)
-            parser.print(parser.script + ": no such command '" + commandName + "'");  
+            return parser.print(parser.script + ": no such command '" + commandName + "'");  
           parser.specs = _(command.specs).extend(parser.globalSpecs);  
           parser.script += " " + command.name;
           if(command.help)
@@ -180,7 +181,7 @@ function ArgParser() {
 
       if(printHelp && (argv.indexOf("--help") != -1
            || argv.indexOf("-h") != -1))
-        parser.print(parser.getUsage(command));
+        return parser.print(parser.getUsage(command));
 
       var options = {};
       args = argv.map(function(arg) {
@@ -190,11 +191,10 @@ function ArgParser() {
 
       /* parse the args */
       args.reduce(function(arg, val) {
-        /* word */
+        /* positional */
         if(arg.isValue) {
           positionals.push(arg.value);
         }
-        /* -c */
         else if(arg.chars) {
           var lastChar = arg.chars.pop();
           
@@ -203,32 +203,41 @@ function ArgParser() {
             setOption(options, ch, true);
           });
 
-          /* -c 3 */
-          if(val.isValue && opt(lastChar).expectsValue) {
-            setOption(options, lastChar, val.value);
-            return Arg(); // skip next turn - swallow arg
-          }
-          else if(opt(lastChar).expectsValue && val.value === undefined) {
-            parser.print(opt(lastChar).name + " expects a value\n\n" + parser.getUsage(command));
+          /* -v key */
+          if(!opt(lastChar).flag) {
+             if(val.isValue)  {
+                setOption(options, lastChar, val.value);
+                return Arg(); // skip next turn - swallow arg                
+             }
+             else {
+                parser.print("'-" + (opt(lastChar).name || lastChar) + "'"
+                  + " expects a value\n\n" + parser.getUsage(command));
+             }
           }
           else {
+            /* -v */
             setOption(options, lastChar, true);
           }
+
         }
-        /* --config=tests.json or --debug */
         else if(arg.full) {
           var value = arg.value;
-          /* --debug */
+
+          /* --key */
           if(value === undefined) {
-            /* --config test */
-            if(val.isValue && opt(arg.full).expectsValue) {
-              setOption(options, arg.full, val.value);
-              return Arg();
-            }
-            else if(opt(arg.full).expectsValue && val.value === undefined) {
-              parser.print(opt(arg.full).name + " expects a value\n\n" + parser.getUsage(command));
+            /* --key value */
+            if(!opt(arg.full).flag) {
+              if (val.isValue) {
+                setOption(options, arg.full, val.value);
+                return Arg();           
+              }
+              else {
+                parser.print("'--" + (opt(arg.full).name || arg.full) + "'"
+                  + " expects a value\n\n" + parser.getUsage(command));                  
+              }
             }
             else {
+              /* --flag */
               value = true;
             }
           }
@@ -250,8 +259,9 @@ function ArgParser() {
 
       // exit if required arg isn't present
       parser.specs.forEach(function(opt) {
-        if(opt.required && options[opt.name] === undefined)
-          parser.print(opt.name + " argument is required\n\n" + parser.getUsage(command));
+        if(opt.required && options[opt.name] === undefined) {
+           parser.print(opt.name + " argument is required\n\n" + parser.getUsage(command));           
+        }
       });
     
       if(command && command.callback)
@@ -351,7 +361,6 @@ Opt = function(opt) {
   var abbr = opt.abbr || abbr,   // e.g. v from -v
       full = opt.full || full, // e.g. verbose from --verbose
       metavar = opt.metavar || metavar;  // e.g. PATH from '--config=PATH'
-      expectsValue = opt.expectsValue || metavar || opt.default;
 
   var string;
   if(opt.string) {
@@ -379,8 +388,7 @@ Opt = function(opt) {
     matches: function(arg) {
       return opt.full == arg || opt.abbr == arg || opt.position == arg
         || opt.name == arg || (opt.list && arg >= opt.position);
-    },
-    expectsValue: expectsValue
+    }
   });
   return opt;
 }
diff --git a/package.json b/package.json
index 7bdb454..c7334ab 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
     "name": "nomnom",
     "description": "Option parser with generated usage and commands",
-    "version": "0.6.1",
+    "version": "1.0.0",
     "author": "Heather Arthur <fayearthur@gmail.com>",
     "repository": {
         "type": "git",
